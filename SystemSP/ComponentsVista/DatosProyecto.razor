@inject I18nText serviceTranslator;
@inject ProjectsApplication serviceConection;
<section class="ViewProjectFirst">
    <SliderImage Images="@ProjectInfo.ImagesProject">
    </SliderImage>
    <div class="containerDetails">
        <div class="contenedorDetalles">
            <p class="TituloProyecto">@_projectCard.TituloProyecto</p>
            <label class="descripcionProject">
                @_descriptionProject
            </label>
        </div>
        <div>
            <div class="letterPerson">
                @if (_projectCard.ImagenUsuario != null)
                {
                    @if (_projectCard.ImagenUsuario.Contains("base64"))
                    {
                        <img class="namePerson" src="@_projectCard.ImagenUsuario" />
                    }
                    else
                    {
                        <label class="lbTextPerson">@_projectCard.ImagenUsuario</label>
                    }
                }
            </div>
            <div>
                <p>@_projectCard.NombreUsuario</p>
            </div>
        </div>
        <div class="ContainerTecnologias">
            <p>@_txtViewPage.TechnologyMessage</p>
            <div class="disTech">
                @if (ProjectInfo.TechnologiesUsed != null)
                {
                    @foreach (var item in ProjectInfo.TechnologiesUsed[0])
                    {
                        <div class="circleTech">
                            <img src="/images/Tecnologias/Front/@($"{item}.svg")" class="imageTechSize" />
                        </div>
                    }
                    @foreach (var item in ProjectInfo.TechnologiesUsed[1])
                    {
                        <div class="circleTech">
                            <img src="/images/Tecnologias/Back/@($"{item}.svg")" class="imageTechSize" />
                        </div>
                    }
                }
            </div>
        </div>
        <div class="containerLinks">
            <p @onclick="@(()=> _download = (_download) ? false : true )" class="colorA">@_txtViewPage.DownloadProject</p>
            <p @onclick="@(()=> _contactInformation = (_contactInformation) ? false : true )" class="colorA">@_txtViewPage.ContactInformation</p>
        </div>
    </div>
</section>
@if (_download)
{
    <ModalRenderFragment ClickDisable="@((bool salida) => _download = salida)"
                         SizeModal="height: 35%; width: 30%;">
        @if (_containeDocuments)
        {

            <div class="gridContainerDocuemnts">
                @foreach (var item in _listDocuments)
                {
                    <DownloadFilesContainer FileName="@item.FileName"
                                            FileType="@item.FileType"
                                            UrlDocuments="@item.FileUrl">
                    </DownloadFilesContainer>
                }
            </div>
        }
        else
        {
            <p>No contiene documentos</p>
        }
    </ModalRenderFragment>
}
@if (_contactInformation)
{
    <ModalRenderFragment ClickDisable="@((bool salida) => _contactInformation = salida)"
                         SizeModal="height: 35%; width: 30%;">
        <p>Nombre : <label>@ProjectInfo.ProjectCardInfo.NombreUsuario</label></p>
        <p>Número Celular : <label>@ProjectInfo.ProjectCardInfo.NumeroCelular</label></p>
        <p>Direccion Email : <label>@ProjectInfo.ProjectCardInfo.DireccionEmail</label></p>
    </ModalRenderFragment>
}

@code {
    [Parameter]
    public ProjectInformation ProjectInfo { get; set; }

    private List<InformationDocuments> _listDocuments = new List<InformationDocuments>();
    private ProjectCard _projectCard = new ProjectCard();
    private string _descriptionProject = string.Empty;
    private bool _download = false;
    private bool _contactInformation = false;
    private bool _containeDocuments = false;
    private TextViewPage _txtViewPage = new TextViewPage();

    protected override async Task OnParametersSetAsync()
    {
        _projectCard = ProjectInfo.ProjectCardInfo;
        int longitud = (_projectCard.Descripcion != null) ? _projectCard.Descripcion.Length : 0;
        if (longitud >= 350)
            _descriptionProject = $"{_projectCard.Descripcion.Remove(349)} .....";
        else
            _descriptionProject = _projectCard.Descripcion;

        await _getProjectDocuments(_projectCard.IdProyecto);
    }


    protected override async Task OnInitializedAsync()
    {
        _txtViewPage = await serviceTranslator.GetTextTableAsync<TextViewPage>(this);
    }
    private async Task _getProjectDocuments(int idProject)
    {
        _listDocuments = await serviceConection.GetDataFromService<List<InformationDocuments>>(
                                                            _listDocuments, $"Project/DownloadDocuments/{idProject}");
        if (_listDocuments.Any())
            _containeDocuments = true;
    }
}
