@inject IJSRuntime JsRun;
@inject I18nText ServiceTranslator;
@inject ProjectsApplication serviceConection;
@inject NavigationManager NavigationManager;
@inject UserInformationResult UserInfoResult;
@inject ValidarFormularios validaForm;

<section class="fondo" id="ModalRegistro">
    <section class="popUp">
        <CerrarModal Mensaje="@_textIndex.MessageRegister"></CerrarModal>
        <div>
            <EditForm class="formualario_Registro" Model="_formulario">
                <div class="disForm">
                    <InputText @bind-Value="_formulario.NameUser" maxlength="30" placeholder="Nombre"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                    <InputText @bind-Value="_formulario.LastNameUser" maxlength="30" placeholder="@_textIndex.LastName"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                </div>
                <div class="disForm">
                    <InputSelect @bind-Value="_formulario.IdentificacionType" class="selectType selectType-Width selectStile">
                        <option value="1" selected>Cédula de Ciudadanía</option>
                        <option value="2">Tarjeta de Identidad</option>
                        <option value="3">Cédula de Extranjería</option>
                    </InputSelect>
                    <InputText @bind-Value="_formulario.IdentificationNumber" maxlength="25" placeholder="Número de identificación"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                </div>
                <div class="disForm">
                    <InputText type="email" @bind-Value="_formulario.Email" placeholder="@_textIndex.Mail"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                    <InputText type="email" @bind-Value="_formulario.EmailConfirm" placeholder="Repetir Correo"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                </div>
                <div class="disForm">
                    <InputText type="password" @bind-Value="_formulario.Password" placeholder="@_textIndex.Password"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                    <InputText type="password" @bind-Value="_formulario.PasswordConfirm" placeholder="@_textIndex.RepeatPassword"
                               @onblur="habilitarBoton" class="registro_form">
                    </InputText>
                </div>
                <div class="disForm">
                    <div>
                        <span>
                            <label class="radio">
                                <input type="radio" id="checkAprendiz" name="checkUser" checked
                                       @onchange="@(()=>_formulario.UserType = 2)">
                                <span>@_textIndex.Apprentice</span>
                            </label>
                        </span>
                        <span>
                            <label class="radio" for="checkEmpresa">
                                <input type="radio" id="checkEmpresa" name="checkUser"
                                       @onchange="@(()=>_formulario.UserType = 3)">
                                <span>@_textIndex.Company</span>
                            </label>
                        </span>
                    </div>
                    <div>
                        <InputText type="tel" @bind-Value="_formulario.Telephone" placeholder="@_textIndex.Telephone"
                                   @onblur="habilitarBoton" maxlength="10" class="registro_form">
                        </InputText>
                    </div>
                </div>
                @if (_formulario.UserType == 3)
                 {
                    <div>
                        <InputText @bind-Value="_formulario.CompanyName" placeholder="Nombre Empresa" class="registro_form_Company">
                        </InputText>

                        <InputText @bind-Value="_formulario.CompanyAddress" placeholder="Dirección Empresa" class="registro_form_Company">
                        </InputText>

                        <InputText @bind-Value="_formulario.City" placeholder="Ciudad" class="registro_form_Company">
                        </InputText>
                    </div>
                 }
                <div class="centerBotonText">
                    <button class="@_classBoton" disabled="@_btnDeshabilitado" @onclick="RegistrarUsuario">@_textIndex.Registry</button>
                    <p>@_textIndex.MessageAccount <a href="#">@_textIndex.Login</a></p>
                </div>
            </EditForm>
        </div>
    </section>
</section>

@code {
    //variables formualario
    private FormRegister _formulario = new FormRegister();

    private TextIndexPage _textIndex = new TextIndexPage();
    //Variables UI
    private bool _btnDeshabilitado = true;
    private string _classBoton = "btRegistroForm-Unlock";
    //Metodo
    private async Task RegistrarUsuario()
    {
        bool _passInvalido = false;
        bool _mailInvalido = validaForm.ValidaEmail(_formulario.Email);
        bool _mailConfirmValido = validaForm.ValidaEmail(_formulario.EmailConfirm);
        bool _mailValido = validaForm.ValidaPassEmail(_formulario.Email, _formulario.EmailConfirm);

        if (_formulario.Password.Length > 6)
            _passInvalido = validaForm.ValidaPassEmail(_formulario.Password, _formulario.PasswordConfirm);
        if (!_passInvalido || !_mailInvalido || !_mailConfirmValido || !_mailValido)
        {
            string _msPass = String.Empty;
            string _msMail = String.Empty;
            if (!_passInvalido)
                _msPass = "La contraseña ingresa no coinciden";
            if (!_mailInvalido || !_mailConfirmValido)
                _msMail = "El correo electrónico ingresado no es valido";
            else if (!_mailValido)
                _msMail = "El correo electrónico ingresado no coincide";
            await JsRun.MensajesRegistro(_msPass, _msMail);
        }
        else
        {
            UserInformation result = await serviceConection.PostUser(_formulario);
            UserInfoResult.UserEmail = result.UserEmail;
            UserInfoResult.UserId = result.UserId;
            UserInfoResult.UserImage = result.UserImage;
            UserInfoResult.UserName = result.UserName;
            UserInfoResult.UserPassword = result.UserPassword;
            UserInfoResult.UserTelephone = result.UserTelephone;
            await JsRun.InvokeVoidAsync(identifier: "salirMenu.HabilitarScroll");
            if (result.MessageStates.UserCreateSuccessfull)
                NavigationManager.NavigateTo($"PublicarProyecto");
        }
    }
    private async Task habilitarBoton()
    {
        if (isValid(_formulario.Email) && isValid(_formulario.Password) && isValid(_formulario.PasswordConfirm)
            && isValid(_formulario.NameUser) && isValid(_formulario.LastNameUser) && isValid(_formulario.PasswordConfirm)
            && isValid(_formulario.IdentificationNumber) && isValid(_formulario.Telephone) && _formulario.Password.Length > 6)
        {
            _classBoton = "btRegistroForm";
            _btnDeshabilitado = false;
        }
        else
        {
            _classBoton = "btRegistroForm-Unlock";
            _btnDeshabilitado = true;
        }
    }
    private bool isValid(string ms)
    {
        if (string.IsNullOrEmpty(ms)) return false;
        else return true;
    }
    protected override async Task OnInitializedAsync()
    {
        _formulario.UserType = 2;
        _formulario.IdentificacionType = "1";
        _textIndex = await ServiceTranslator.GetTextTableAsync<TextIndexPage>(this);
    }
}
