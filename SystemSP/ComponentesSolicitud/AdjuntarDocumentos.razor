@inject IJSRuntime JsRun;
@inject I18nText serviceTranslator;
@inject SaveIFiles _service;
<section>
    <div class="elementsButton">
        <div class="CenterdivFlex">
            <label for="archivoImage" class="custom-file-upload" style="margin-right:10px">
                <img src="images/img_proyect/image.svg" class="imgFile" />@_textPublicar.SelectImages
            </label>
            <span class="spanOculto" id="spanOcultoImages">
                <BlazorInputFile.InputFile OnChange="GetFileProject" />
            </span>
            <TooltipApp MensajeToolTip=@_textPublicar.AddImages></TooltipApp>
        </div>
        <div style="display:flex">
            <span style="margin-right:20px;">@_counter</span>
            <TooltipApp MensajeToolTip="Número de Imagenes (Minimo 5 imagenes)"></TooltipApp>
        </div>
    </div>
</section>

@code {
    [CascadingParameter]
    public FormRequest RequestForm { get; set; }
    private int _counter = 0;

    private TextPublicarPage _textPublicar = new TextPublicarPage();

    private async Task GetFileProject(IFileListEntry[] archivos)
    {
        IFileListEntry file = archivos.FirstOrDefault();
        if (file != null)
        {
            string dataBase64 = await _service.GetFileBase64(file);
            if (dataBase64 != "NoK")
            {
                if (file.Type.Contains("image/"))
                {
                    RequestForm.FilesData.Add(new FileStreamData()
                    {
                        FileName = file.Name,
                        FileStreamContent = dataBase64,
                        FileType = file.Type
                    });
                }
                else
                    await JsRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz", _textPublicar.FileTypeNotAllowed);
            }

        }
        else
        {
            await JsRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz", _textPublicar.ErrorGettingFile);
        }
        _counter = RequestForm.FilesData.Count;
    }

    protected override async Task OnInitializedAsync()
    {
        _textPublicar = await serviceTranslator.GetTextTableAsync<TextPublicarPage>(this);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRun.EjecutarJavaScriptFunc("CambiarIdInputImage");
    }
}
