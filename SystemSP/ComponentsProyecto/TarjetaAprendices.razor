@inject IJSRuntime JsRun;
@inject ProjectsApplication ProjectService;
@inject I18nText _translateService;

<section class="@ClassName sizeCardAprendice">
    <ol class="olElementsAprendices">
        <li class="elements1">
            <div>
                <img src="/images/PageImage/userApp.svg" class="imageUser" />
            </div>
            <div>
                <p class="p-no-margin">@_textPage.Options</p>
                <div class="sect-flex">
                    <span style="margin-right:10px">
                        <TooltipRenderFragment MensajeToolTip="@_textPage.DeleteApprentice">
                            <button class="deleteAprentice botonOptions" disabled="@DesabilitarBoton"
                                    @onclick="@(()=>_habilitaModal = true)"></button>
                        </TooltipRenderFragment>
                    </span>
                    <span style="margin-right:10px">
                        <TooltipRenderFragment MensajeToolTip="@_textPage.UpdateApprentice">
                            <button class="editeAprentice botonOptions" @onclick="@changedValuesEdit"></button>
                        </TooltipRenderFragment>
                    </span>
                    <span>
                        <TooltipRenderFragment MensajeToolTip="@_textPage.SaveChanges">
                            <button class="upDateAprentice botonOptions @_classButon"
                                    @onclick="saveChangedEdit" disabled="@_upDateBoton"></button>
                        </TooltipRenderFragment>
                    </span>
                </div>
            </div>
        </li>
        <li class="elements2">
            <div>
                <p class="p-no-margin">@_textPage.MemberName</p>
                <input type="text" placeholder="@ApprenticeName" class="@_inputClass"
                       @bind="_aprentice.Nombre" @onfocusout="_validaUpdate" disabled="@_habilitarInput" maxlength="30" />
            </div>
            <div>
                <p class="p-no-margin">@_textPage.MemberLast</p>
                <input type="text" placeholder="@ApprenticeLastName" class="@_inputClass"
                       @bind="_aprentice.Apellido" @onfocusout="_validaUpdate" disabled="@_habilitarInput" maxlength="30"/>
            </div>
        </li>
        <li class="elements3">
            <div>
                <p class="p-no-margin">@_textPage.MemberEmail</p>
                <input type="text" placeholder="@Email" class="@_inputClass"
                       @bind="_aprentice.Email" @onfocusout="_validaUpdate" disabled="@_habilitarInput" maxlength="100"/>
            </div>
            <div>
                <p class="p-no-margin">@_textPage.MemberPhone</p>
                <input type="text" placeholder="@Telephone" class="@_inputClass"
                       @bind="_aprentice.Telefono" @onfocusout="_validaUpdate" disabled="@_habilitarInput" maxlength="10"/>
            </div>
        </li>
    </ol>
</section>
@if (_habilitaModal)
{
    <ModalOpciones ActionResult="@_validaResultado"
                   CancelMessage="@_textPage.Cancel"
                   Menssage="@_textPage.MsUserDelete"
                   SaveMessage="@_textPage.Delete"></ModalOpciones>
}

@code {
    [CascadingParameter]
    public int IdUsuarioAplicacion { get; set; }

    [Parameter]
    public string ApprenticeName { get; set; }
    [Parameter]
    public string ApprenticeLastName { get; set; }
    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public string Telephone { get; set; }
    [Parameter]
    public int IdApprendice { get; set; }
    [Parameter]
    public int IdProject { get; set; }
    [Parameter]
    public string ClassName { get; set; }
    [Parameter]
    public bool DesabilitarBoton { get; set; }

    private bool _habilitaModal = false;
    private bool _habilitarInput = true;
    private string _inputClass = "inputAprendiz_sin";
    private string _classButon = string.Empty;
    private bool _upDateBoton = true;
    private AprenticeDetails _aprentice = new AprenticeDetails();
    private TextPublicarPage _textPage = new TextPublicarPage();

    protected override void OnInitialized()
    {
        if (IdApprendice != 0)
        {
            _aprentice.Nombre = ApprenticeName;
            _aprentice.Apellido = ApprenticeLastName;
            _aprentice.Email = Email;
            _aprentice.Telefono = Telephone;
        }
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        _textPage = await _translateService.GetTextTableAsync<TextPublicarPage>(this);
    }
    private async Task _validaResultado(bool salida)
    {
        _habilitaModal = false;
        if (salida)
        {
            string msResult = _textPage.MsErrorDeleteUser;
            var request = new UpdateDataProject()
            {
                IdApprentice = IdApprendice,
                IdUser = IdUsuarioAplicacion,
                IdProject = IdProject
            };
            bool serviceSalida = await ProjectService.DeleteApprentice(request);
            if (serviceSalida)
            {
                _clearField();
                msResult = _textPage.MsUserDeleted;
            }
            await JsRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz", msResult);
        }
    }
    private async Task saveChangedEdit()
    {
        if (_validaText(_aprentice.Nombre) && _validaText(_aprentice.Apellido) && _validaText(_aprentice.Email)
            && _validaText(_aprentice.Telefono))
        {
            string msResult = "No se pudo actualizar el aprendiz";
            var request = new UpdateDataProject()
            {
                IdApprentice = IdApprendice,
                IdUser = IdUsuarioAplicacion,
                IdProject = IdProject,
                Estado = "Activo",
                Aprentice = _aprentice
            };
            bool serviceSalida = await ProjectService.UpDateApprentice(request);
            if (serviceSalida)
            {
                msResult = "Usuario actualizado";
                ClassName = "colorCategoriAdmin";
                _habilitarInput = true;
                _upDateBoton = true;
            }
            await JsRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz", msResult);
        }
    }
    private void changedValuesEdit()
    {
        _habilitarInput = !_habilitarInput;
        _inputClass = (_habilitarInput) ? "inputAprendiz_sin" : "inputAprendiz_con";
    }
    private void _validaUpdate()
    {
        if (_validaText(_aprentice.Nombre) && _validaText(_aprentice.Apellido) && _validaText(_aprentice.Email)
            && _validaText(_aprentice.Telefono))
        {
            _classButon = "colorCategoriAdmin";
            _inputClass = "inputAprendiz_sin";
            _habilitarInput = false;
            _upDateBoton = false;
        }
        else
            _classButon = string.Empty;
    }
    private bool _validaText(string Text, bool result = false)
        => result = (string.IsNullOrEmpty(Text)) ? false : true;
    private void _clearField()
    {
        _aprentice.Nombre = string.Empty;
        _aprentice.Apellido = string.Empty;
        _aprentice.Email = string.Empty;
        _aprentice.Telefono = string.Empty;

        ApprenticeName  = _textPage.AddName;
        ApprenticeLastName = _textPage.AddLast;
        Email = _textPage.AddEmail;
        Telephone = _textPage.AddPhone;
    }
}
