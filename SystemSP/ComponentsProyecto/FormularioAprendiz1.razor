@inject I18nText _traductorService;
@inject SetChangeLanguage _lenguage;
<section>
    <EditForm Model="ProjectApp">
        <ol class="formAprendiz1">
            <li class="liForm">
                <div class="containerTexto">
                    <label class="lbColor">@_txtPublicar.ProjectName
                        <span style="color:#ED0000">*</span>
                    </label>
                    <InputText @bind-Value="ProjectApp.NameProject" class="inputFormAprendiz fontProject fontInput"
                               @onfocusout="validaForm" MaxLength="30">
                    </InputText>
                </div>
                <div class="containerTexto">
                    <label class="lbColor">@_txtPublicar.CategoryForm
                        <span style="color:#ED0000">*</span>
                    </label>
                    <InputSelect @bind-Value="ProjectApp.Category" class="selectType selectStile">
                        @foreach (var item in _categorys)
                        {
                            <option value="@item">@item</option>
                         }
                    </InputSelect>
                </div>
            </li>
            <li class="liForm">
                <!--Ciudad Formación-->
                <div class="containerTexto">
                    <label class="lbColor">@_txtPublicar.Department
                        <span style="color:#ED0000">*</span>
                    </label>
                    <InputSelect @bind-Value="ProjectApp.Departament" class="selectType selectStile">
                        @foreach (var item in _listDepa)
                         {
                            <option value="@item">@item</option>
                         }
                    </InputSelect>
                </div>
                <div class="containerTexto">
                <label class="lbColor">
                    @_txtPublicar.TrainingCity
                <span style="color:#ED0000">*</span>
            </label>
            <InputText @bind-Value="ProjectApp.TrainingCity" class="inputFormAprendiz fontInput fontCity"
                       @onfocusout="validaForm" MaxLength="40"></InputText>
        </div>
                </li>
            <li class="liForm">
            <!--Fecha de publicación proyecto-->
            <div class="containerTexto">
                <div class="selects">
                    <div class="containerTexto">
                        <label class="lbColor">
                            @_txtPublicar.TrainingType
                        <span style="color:#ED0000">*</span>
                    </label>
                </div>
                <span>
                    <label class="radio">
                        <input type="radio" id="checkTecnico" name="checkTech" @bind="ProjectApp.TrainingType" checked>
                        <span>@_txtPublicar.Technical</span>
                    </label>
                </span>
                <span>
                    <label class="radio">
                        <input type="radio" id="checkTecnologo" name="checkTech" @bind="ProjectApp.TrainingType">
                        <span>@_txtPublicar.Technologist</span>
                    </label>
                </span>
                <span>
                    <label class="radio">
                        <input type="radio" id="checkOtro" name="checkTech" @bind="ProjectApp.TrainingType">
                        <span>@_txtPublicar.OtherType</span>
                    </label>
                </span>
            </div>
        </div>
        <div class="containerTexto">
            <div class="containerTexto">
                <label class="lbColor">
                    @_txtPublicar.ProjectDate
                <span style="color:#ED0000">*</span>
            </label>
        </div>
        <div class="containerFecha">
            <InputSelect @bind-Value="_anio" class="selectType selectStile2">
                @foreach (var item in _listaAnio)
                {
                    <option class="opcionItem">@item</option>
                }
            </InputSelect>
            <InputSelect @bind-Value="_mes" class="selectType selectStile2">
                @for (int i = 1; i <= 12; i++)
                {
                    <option class="opcionItem">@i</option>
                }
            </InputSelect>
            <InputSelect @bind-Value="_dia" class="selectType selectStile2">
                @foreach (var item in _listDias)
                {
                    <option class="opcionItem">@item</option>
                }
            </InputSelect>
            <TooltipApp MensajeToolTip="@_txtPublicar.TooltipData"></TooltipApp>
        </div>
        </div>
        </li>
        <li>
            <!--Descripcion del proyecto-->
            <div class="containerTexto">
                <label class="lbColor">
                    @_txtPublicar.ProjectDescription
                <span style="color:#ED0000">*</span>
            </label>
            <InputTextArea @bind-Value="ProjectApp.ProjectDescription" class="textDescripcion"
                           placeholder="@_txtPublicar.CampDescription"
                           @onfocusout="validaForm" MaxLength="2000">
            </InputTextArea>
        </div>
        </li>
        <li>
            <!--Botones-->
            <div class="disBotones">
                <button class="PublicarProyecto-Unlock" disabled>@_txtPublicar.BottonBack</button>
                <button class="@_classBotones" disabled="@continuarDis" @onclick="_validaContinuar">
                    @_txtPublicar.BottonContinue
                </button>
            </div>
        </li>
        </ol>
</EditForm>
</section>
@code {
    [Parameter]
    public EventCallback<int> FormValid { get; set; }
    [CascadingParameter]
    public FormProjectApp ProjectApp { get; set; }

    private TextPublicarPage _txtPublicar = new TextPublicarPage();
    private List<string> _categorys = new List<string>();
    private bool _btnConrinuarDisabled = true;
    private string _classBotones = "PublicarProyecto-Unlock";
    private List<string> _listaAnio = new List<string>();
    private List<string> _listDias = new List<string>();
    private string[] _listDepa = {
        "Amazonas",
        "Antioquia",
        "Arauca",
        "Atlántico",
        "Bogotá",
        "Bolívar",
        "Boyacá",
        "Caldas",
        "Caquetá",
        "Casanare",
        "Cauca",
        "Cesar",
        "Chocó",
        "Córdoba",
        "Cundinamarca",
        "Guainía",
        "Guaviare",
        "Huila",
        "La Guajira",
        "Magdalena",
        "Meta",
        "Nariño",
        "Norte de Santander",
        "Putumayo",
        "Quindío",
        "Risaralda",
        "San Andrés y Providencia",
        "Santander",
        "Sucre",
        "Tolima",
        "Valle del Cauca",
        "Vaupés",
        "Vichada"
    };
    private bool continuarDis = true;
    private string _dia = DateTime.Now.Day.ToString();
    private string _mes = DateTime.Now.Month.ToString();
    private string _anio = DateTime.Now.Year.ToString();
    private bool _habilitarCambio = false;
    private string _classContenedor = "";

    protected override async Task OnInitializedAsync()
    {
        _listaAnio = _getAnio();
        _listDias = _getDias(DateTime.Now.Year, DateTime.Now.Month);
        _txtPublicar = await _traductorService.GetTextTableAsync<TextPublicarPage>(this);
        var _txtCategorys = await _traductorService.GetTextTableAsync<TextCategoriasIndex>(this);
        _categorys = _lenguage.GetCategorys(_txtCategorys);
        ProjectApp.Category = _categorys[0];
        ProjectApp.Departament = _listDepa[0];
        base.OnInitialized();
    }

    private async Task _validaContinuar()
    {
        ProjectApp.ProjectDate = $"{_anio}-{_mes}-{_dia}";
        await FormValid.InvokeAsync(1);
    }
    private List<string> _getAnio()
    {
        var years = new List<string>();
        int anioActual = DateTime.Now.Year;
        while (anioActual > 2010)
        {
            years.Add($"{anioActual}");
            anioActual--;
        }
        return years;
    }
    private List<string> _getDias(int anioActual, int mesActual)
    {
        var dias = new List<string>();
        List<DateTime> meses = Enumerable.Range(1, DateTime.DaysInMonth(anioActual, mesActual))
            .Select(day => new DateTime(anioActual, mesActual, day)).ToList();

        meses.ForEach((ivalor) =>
        {
            dias.Add(ivalor.ToString("dd"));
        });

        return dias;
    }
    private void validaForm()
    {
        if (!string.IsNullOrWhiteSpace(ProjectApp.TrainingCity) &&
            !string.IsNullOrWhiteSpace(ProjectApp.NameProject) &&
            !string.IsNullOrWhiteSpace(ProjectApp.ProjectDescription))
        {
            _classBotones = "BotonPublicarProyecto";
            continuarDis = false;
        }
    }
    private void _habilitarOpciones()
    {
        if (!_habilitarCambio)
        {
            _habilitarCambio = true;
            _classContenedor = "containerLand";
        }
        else
        {
            _habilitarCambio = false;
            _classContenedor = string.Empty;
        }
    }
    private void _DesabilitarOpciones()
    {
        _habilitarCambio = false;
        _classContenedor = string.Empty;
    }
}
