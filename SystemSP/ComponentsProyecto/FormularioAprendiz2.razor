@inject I18nText TraductorService;
<section>
    <EditForm Model="_formGaes" OnValidSubmit="HandleValidSubmit">
        <div class="divFlex">
            <label for="nombreSena">Nombre de la Dirección Sena</label>
            <InputText @bind-Value="_formGaes.NombreDireccionSena"
                       @onfocusout="validaCampo" MaxLength="40" class="inpuNombreSena"></InputText>
        </div>
        <div>
            <div class="dataOpcional">
                <p>@_txtPublicar.ApprenticesData</p>
                <TooltipApp MensajeToolTip="@_txtPublicar.TeamMS"></TooltipApp>
            </div>
            <ol>
                <li>
                    <div>
                        <label>@_txtPublicar.ApprenticeName</label>
                        <input type="text" @bind="_aprendiz.Nombre" class="inputFormAprendiz" />
                    </div>
                    <div>
                        <label>@_txtPublicar.ApprenticeLastName</label>
                        <input type="text" @bind="_aprendiz.Apellido" class="inputFormAprendiz" />
                    </div>
                </li>
                <li>
                    <div>
                        <label>@_txtPublicar.Telephone</label>
                        <input type="text" @bind="_aprendiz.Telefono" class="inputFormAprendiz" />
                    </div>
                    <div>
                        <label>@_txtPublicar.AprendiceEmail</label>
                        <input type="text" @bind="_aprendiz.Correo" class="inputFormAprendiz" />
                    </div>
                </li>
                <li style="padding:20px 0">
                    <button type="button" class="@BotonPublicar" @onclick="AddAprendiz">@_txtPublicar.BottonAddMembers</button>
                </li>
                <li>
                    <BotonesAdjuntarArchivos></BotonesAdjuntarArchivos>
                </li>
                <li>
                    <!--Botones aciones-->
                    <div class="disBotones">
                        <button type="button" class="BotonPublicarProyecto">@_txtPublicar.BottonBack</button>
                        <button class="@_classBotones" type="submit"
                                disabled="@continuarDis">
                            @_txtPublicar.BottonContinue
                        </button>
                    </div>
                </li>
            </ol>
        </div>
    </EditForm>
</section>

@code {
    [CascadingParameter]
    protected List<EIntegrantesGaes> _integrantesGaes { get; set; }

    [Parameter]
    public EventCallback<int> FormValid { get; set; }

    private TextPublicarPage _txtPublicar = new TextPublicarPage();
    private EFormularioAprendizGaes _formGaes = new EFormularioAprendizGaes();
    private EIntegrantesGaes _aprendiz = new EIntegrantesGaes();
    private string _classBotones = "PublicarProyecto-Unlock";
    private bool continuarDis = true;
    private string BotonPublicar = "BtPublicarAprendiz";

    private void validaCampo()
    {
        if (!string.IsNullOrEmpty(_formGaes.NombreDireccionSena))
        {
            _classBotones = "BotonPublicarProyecto";
            continuarDis = false;
        }
    }
    private void AddAprendiz()
    {
        if (_integrantesGaes.Count < 3)
        {
            _integrantesGaes.Add(_aprendiz);
        }
        else
        {
            BotonPublicar = "PublicarProyecto-Unlock";
        }
    }

    private async Task HandleValidSubmit() => await FormValid.InvokeAsync(2);

    protected override async Task OnInitializedAsync()
    {
        _txtPublicar = await TraductorService.GetTextTableAsync<TextPublicarPage>(this);
        base.OnInitialized();
    }
}
