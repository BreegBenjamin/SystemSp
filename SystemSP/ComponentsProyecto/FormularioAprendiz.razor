@inject IJSRuntime JsRun;
@inject I18nText ServiceTraductor;
<section class="info-software estilosBordes">
    <p>@_tituloFormulario</p>
    <div class="indicadorMenu">
        <div class="IndicadorPage @_indicado1"></div>
        <div class="IndicadorPage @_indicado2"></div>
        <div class="IndicadorPage @_indicador3"></div>
    </div>
    @switch (Paginador)
    {
        case 0:
            <FormularioAprendiz1 FormValid="HabilitarContinuar"></FormularioAprendiz1>
            break;
        case 1:
            <FormularioAprendiz2 FormValid="HabilitarContinuar"></FormularioAprendiz2>
            break;
        case 2:
            <FormularioAprendiz3 ProcessSuccess="ProcessSuccess"></FormularioAprendiz3>
            break;
    }
</section>
@code {
    [Parameter]
    public EventCallback<int> ProcessSuccess { get; set; }

    private int Paginador = 0;
    private string _indicado1 = "colorIndicador";
    private string _indicado2 = "FalseColorIndicador";
    private string _indicador3 = "FalseColorIndicador";
    private string _tituloFormulario = string.Empty;
    //Funciones
    protected override void OnInitialized()
    {

    }
    private void HabilitarContinuar(int indicador)
    {
        switch (indicador)
        {
            case 1:
                _indicado1 = "FalseColorIndicador";
                _indicado2 = "colorIndicador";
                _indicador3 = "FalseColorIndicador";
                _tituloFormulario = "";
                break;
            case 2:
                _indicado1 = "FalseColorIndicador";
                _indicado2 = "FalseColorIndicador";
                _indicador3 = "colorIndicador";
                break;
        }
        Paginador = indicador;
    }
    private async Task PublicarProyecto() => await JsRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz");
}