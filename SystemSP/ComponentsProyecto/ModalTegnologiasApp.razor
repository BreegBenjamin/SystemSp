@inject I18nText serviceTranslator;
<section style="display:flex" class="modalConfiguracion">
    <div class="modalTegnologias modalContenedor">
        <p>@_textPublicar.SelecTechnology</p>
        <div class="ContainerTech">
            @foreach (var tech in TecnologiasApp)
            {
                <div class="classTech" @onclick="@(()=> tech.CheckTecnologia = (!tech.CheckTecnologia)? true : false)">
                    <div style="display: grid; grid-template-columns: max-content 1fr;">
                        <div class="ImgTech">
                            <img src="/images/Tecnologias/@tech.UrlImage" height="50" width="50" />
                        </div>
                        <div class="centerTXt">
                            <h2>@tech.Nombre</h2>
                        </div>
                    </div>
                    <div style="height:100%">
                        <input type="checkbox" value="@tech.CheckTecnologia" checked="@tech.CheckTecnologia" />
                    </div>
                </div>
            }
        </div>
        <div style="margin:20px 0">
            <button class="btEstadoModal btCancelar" @onclick='@(() => CancelarCambio.InvokeAsync(false))'>Cancelar</button>
            <button class="btEstadoModal btGuardar" @onclick="_cambiosGuradados">Guardar</button>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public EventCallback<bool> CancelarCambio { get; set; }
    [Parameter]
    public EventCallback<string> GuardarCambios { get; set; }
    [Parameter]
    public List<ETecnologiasApp> TecnologiasApp { get; set; }

    TextPublicarPage _textPublicar = new TextPublicarPage();
    private async Task _cambiosGuradados()
    {
        string tecnology = "none";
        if (TecnologiasApp != null)
        {
            TecnologiasApp.ForEach((x) =>
            {
                if (x.CheckTecnologia)
                    tecnology = $"{tecnology}-{x.DetalleTecnologia}";
            });
        }
        await GuardarCambios.InvokeAsync(tecnology);
    }
    protected override async Task OnInitializedAsync()
    {
        _textPublicar = await serviceTranslator.GetTextTableAsync<TextPublicarPage>(this);
    }
}
