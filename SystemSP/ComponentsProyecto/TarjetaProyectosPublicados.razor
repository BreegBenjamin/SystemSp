@inject IJSRuntime JSRun;
@inject ProjectsApplication ProjectService;
@inject NavigationManager NavigationManager;
@inject I18nText _serviceTranslator;

<section class="proyectoDetails @NameClassCategoria" id="divCard">
    <div @onclick="@(()=> OnClick.InvokeAsync(DetalleProyecto))">
        <div class="postionName">
            <div class="circleProyect estadoCircle"></div>
            <div class="divFlexElements">
                <img src="/images/proyectosPortadas/@($"{Categoria}.jpg")" alt="imgProyect" class="imageProjectPublish" />
                <p class="textAlign" style="margin:3px">@NombreProyecto</p>
            </div>
        </div>
        <div class="postionViews">
            <div class="viewDetails">
                <p class="p-no-margin">@_textPage.Downloads</p>
                <label>@NumeroDescargas</label>
            </div>
            <div class="viewDetails">
                <p class="p-no-margin">@_textPage.View</p>
                <label>@NumeroVistas</label>
            </div>
        </div>
    </div>
    <div class="butonEliminar">
        <button class="btnDelete" @onclick="@(()=> _habilitaModal = true)">@_textPage.Delete</button>
    </div>
</section>
@if (_habilitaModal)
{
    <ModalOpciones ActionResult="@_eJecutarActualizacion"
                   CancelMessage="@_textPage.Cancel"
                   Menssage="@_textPage.MsDeleteProject"
                   SaveMessage="@_textPage.Delete"></ModalOpciones>
}
@if (_modalFinal)
{
    <ModalOpciones ActionResult="@_redireccionar"
                   CancelMessage="@_textPage.Cancel"
                   Menssage="@_textPage.ProjectDate"
                   SaveMessage="OK"
                   visible="false"></ModalOpciones>
}

@code {
    [CascadingParameter]
    public int IdUsuarioAplicacion { get; set; }

    [Parameter]
    public string NombreProyecto { get; set; }
    [Parameter]
    public ProjectDetails DetalleProyecto { get; set; }
    [Parameter]
    public string Categoria { get; set; }
    [Parameter]
    public string NumeroVistas { get; set; }
    [Parameter]
    public string NumeroDescargas { get; set; }
    [Parameter]
    public EventCallback<ProjectDetails> OnClick { get; set; }
    [Parameter]
    public int IdProyecto { get; set; }

    private TextPublicarPage _textPage = new TextPublicarPage();

    private bool _habilitaModal = false;
    private bool BotonHabilitado = false;
    private string NameClassCategoria = "colorCategoriAdmin";
    private string opacity = "0.7";
    private string MensajeDescripcion = "";
    private string ColorBoton = "ColorBotonNoHanddler";
    private bool _modalFinal = false;

    public async Task _eJecutarActualizacion(bool salida)
    {
        _habilitaModal = false;
        if (salida)
        {
            var request = new UpdateDataProject()
            {
                Estado = "Eliminado", //Estado actualización
                IdUser = IdUsuarioAplicacion,
                IdProject = IdProyecto
            };
            bool serviceSalida = await ProjectService.UpDateProject(request);
            if (serviceSalida)
            {
                await JSRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz", _textPage.MsProjectDeleted);
                NavigationManager.NavigateTo("/PublicarProyecto/0");
            }
            else
                await JSRun.EjecutarJavaScriptFunc("seetAlert.SweetMensajeAprendiz", _textPage.MsErrorDelete);
        }
    }
    private void _redireccionar(bool salida)
    {
        NavigationManager.NavigateTo("/PublicarProyecto");
    }

    protected override async Task OnInitializedAsync()
    {
        _textPage = await _serviceTranslator.GetTextTableAsync<TextPublicarPage>(this);
    }
}
